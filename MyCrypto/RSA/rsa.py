# -*- coding:utf-8 -*-
#! /usr/bin/python3

import time
from functools import wraps

import sys
sys.path.append('../..')
from MyCrypto.util.crt import crt,excrt
from MyCrypto.util.pow_modual import quickPow
from MyCrypto.util.inverse_mod import inverse_mod

def timethis(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        r = func(*args, **kwargs)
        end = time.perf_counter()
        print('used time: {}.{} : {}'.format(func.__module__, func.__name__, end - start))
        return r
    return wrapper

def encrypt(plain, e, N):
    return quickPow(plain, e, N)

@timethis
def decrypt(cypher, d, N):
    return quickPow(cypher, d, N)

@timethis
def quick_Decrypt(cypher, d, p, q):
    """
    use chinese remain theory
    """
    #return crt([cypher**d, cypher**d],[p, q])  #bad way
    t1 = q * inverse_mod(q, p)
    t2 = p * inverse_mod(p, q)
    a1 = quickPow(cypher, d % (p-1), p)
    a2 = quickPow(cypher, d%(q-1), q)
    return (a1 * t1 + a2 * t2) % (p*q)

if __name__ == '__main__':
    p = 25336772790324258952117622504537139442881120269760383961991795601846585772802865528712760553670210656524156997774484665833049279421936394718949688217533213
    q = 18489327396055733397216193236128138397765028288613793035021305599301380136673327250408422592244732819005905679957567952974717041052102175277835219391448987
    print('p is %d\n' % p)
    print('q is %d\n' % q)
    N = p * q
    e = 284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345
    plain = 20954479300759562229443492630736875395047401994614284312881555064519561490577941706588500669849209433899318763682024798381273899464579139638776719307645
    print('plain is %d\n' % plain)
    d = encrypt(plain, e, N)
    c = encrypt(plain, e, N)
    print('c is %d\n' % c)
    decrypt(c, d,N)
    quick_Decrypt(c, d, p, q)
    print('##########################')
    p = 146572266944276414552571965760855246607226678069240106668660181578386781595989160699463808526576663874815995646632148773897564418642180880601104790507114192501811115304717521110637174406573741185291782876014325464715454251577394507433958343630033350762371851536157786369685614439580315333453455858536546435339
    q = 176595503630545110320802089077715073595795550353749957706984679613004614781652468888894358040880104419889035775925676789899816874635011282467895008877749112701080115202656918116802793043005499126096385935759902513315802568365704932856679929801966854714300868388682411628085329188790996885134964619412167049781
    print('p is %d\n' % p)
    print('q is %d\n' % q)
    N = p * q
    e = 65537
    d = inverse_mod(e, (p-1)*(q-1))
    plain = 9470694855847708473604303593266252204447530487766041604984746273779287183421878107282317546152046003855931368662877126773359057192861246983271435420681011
    print('plain is %d\n' % plain)
    c = encrypt(plain, e, N)
    print('c is %d\n' % c)
    decrypt(c, d,N)
    quick_Decrypt(c, d, p, q)
